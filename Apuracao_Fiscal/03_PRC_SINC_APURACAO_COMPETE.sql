CREATE OR REPLACE PROCEDURE PRC_SINC_APURACAO_ICMS AS

  -----------------------DATAS DE ATUALIZACAO
  --vDATA_MOV_INCREMENTAL DATE := TRUNC(SYSDATE) - 90;
  vDATA_MOV_INCREMENTAL DATE := TO_DATE('01/01/2020', 'DD/MM/YYYY');
	
	-----------------------BENEFICIO FISCAL
   vDT_INICIO_BENEFICIO_ES DATE := TO_DATE('01/09/2023', 'DD/MM/YYYY'); 
  vALIQ_RATEIO NUMBER := 0.07;
	vALIQ_CREDITO_PRESUMIDO NUMBER := 0.011;
	vALIQ_CREDITO_ADICIONAL NUMBER := 0.035;
	
	-----------------------VARIAVEIS PARA CALCULO
	vVALOR_SALDO_ANTERIOR NUMBER := 0;
  vVALOR_SALDO_ATUAL    NUMBER;
  vVALOR_APURADO        NUMBER;
  vVALOR_PAGAR          NUMBER;
  vVALOR_RECUPERAR      NUMBER;

	vVALOR_ICMS_ENT_NAC NUMBER;
	vVALOR_ICMS_ENT_IMP NUMBER;
	vVALOR_BASEICMS_ENT_NAC        NUMBER;
	vVALOR_SAID_RED         NUMBER;
	vVALOR_SAID_COMPETE     NUMBER;
	vVALOR_SAID_TRANSF_FORA_COMPETE NUMBER;
	vVALOR_ICMS_SAID_COMPETE NUMBER;

	vVALOR_ICMS_ENT_TOTAL NUMBER;
	vVALOR_SAID_COMPETE_TOTAL NUMBER;

	vPERC_VENDA_RED           NUMBER;
	vPERC_VENDA_COMPETE       NUMBER;

	vVALOR_ESTORNO_CRED_RED   NUMBER; 
	vVALOR_ESTORNO_CRED_COMPETE   NUMBER;
	vVALOR_ESTORNO_CRED_TOTAL   NUMBER;

	vVALOR_ENTRADA_PROPORCIONAL_RED NUMBER;
	vVALOR_ENTRADA_PROPORCIONAL NUMBER;
	vVALOR_CREDITO_7PERC_RED NUMBER;
	vVALOR_CREDITO_7PERC NUMBER;
	vVALOR_CREDITO_ESCOLHIDO NUMBER;
	vVALOR_CREDITO_RED_ESCOLHIDO NUMBER;
	
	vVALOR_CRED_DESTINADO_COMERCIO NUMBER;
	vVALOR_CRED_PRESUMIDO NUMBER;
	vVALOR_ADICIONAL_INCENTIVO NUMBER;
	vVALOR_APURADO_COMPETE NUMBER;
	


BEGIN
  FOR r IN (SELECT M.*
              FROM VIEW_BI_SINC_APURA_COMPETE M
             WHERE M.DATA >= vDATA_MOV_INCREMENTAL
             ORDER BY M.RN)
  
  LOOP
    BEGIN
      IF r.RN = 1 THEN
        vVALOR_SALDO_ANTERIOR := 0;
      END IF;
    
		-- ATRIBUI OS RESULTADOS DA CONSULTA AS VARIAVEIS
    vVALOR_BASEICMS_ENT_NAC := r.VLBASEICMS_ENT_NAC;
		vVALOR_ICMS_ENT_NAC := r.VLICMS_ENT_NAC;
		vVALOR_ICMS_ENT_IMP := r.VLICMS_ENT_IMP;
		vVALOR_SAID_RED := r.VLCONT_SAID_RED;
	  vVALOR_SAID_COMPETE := r.VLCONT_SAID_COMPETE;
	  vVALOR_SAID_TRANSF_FORA_COMPETE := r.VLCONT_SAID_FORA_TRANSF;
		vVALOR_ICMS_SAID_COMPETE := r.VLICMS_SAID_COMPETE;
		
		-- PREPARACAO DAS VARIAVEIS PARA OS CALCULOS
		vVALOR_ICMS_ENT_TOTAL := vVALOR_ICMS_ENT_NAC + vVALOR_ICMS_ENT_IMP;
		vVALOR_SAID_COMPETE_TOTAL := vVALOR_SAID_RED + vVALOR_SAID_COMPETE + vVALOR_SAID_TRANSF_FORA_COMPETE;
		
		-- CALCULO DO PERCENTIAL DO TOTAL DE VENDAS TRIBUTADAS
	  vPERC_VENDA_RED := vVALOR_SAID_RED / vVALOR_SAID_COMPETE_TOTAL;
	  vPERC_VENDA_COMPETE  := vVALOR_SAID_COMPETE / vVALOR_SAID_COMPETE_TOTAL;
		
		-- CALCULO DO ESTORNO DO CREDITO
	  vVALOR_ESTORNO_CRED_RED   := vVALOR_ICMS_ENT_TOTAL * vPERC_VENDA_RED;
		vVALOR_ESTORNO_CRED_COMPETE  := vVALOR_ICMS_ENT_TOTAL * vPERC_VENDA_COMPETE;
		vVALOR_ESTORNO_CRED_TOTAL  := vVALOR_ESTORNO_CRED_RED + vVALOR_ESTORNO_CRED_COMPETE;
			
		-- CALCULO DO CREDITO 7% + RATEIO
		vVALOR_ENTRADA_PROPORCIONAL_RED := vPERC_VENDA_RED * vVALOR_SAID_RED;
		vVALOR_ENTRADA_PROPORCIONAL_COMPETE := vPERC_VENDA_COMPETE * vVALOR_BASEICMS_ENT_NAC;
		
		vVALOR_CREDITO_7PERC_RED := (vALIQ_RATEIO * vVALOR_ENTRADA_PROPORCIONAL_RED ) + (vPERC_VENDA_RED * vVALOR_ICMS_ENT_IMP);
		vVALOR_CREDITO_7PERC := (vALIQ_RATEIO * vVALOR_ENTRADA_PROPORCIONAL_COMPETE) + (vPERC_VENDA_COMPETE * vVALOR_ICMS_ENT_IMP);
		
		vVALOR_CREDITO_ESCOLHIDO := IF vVALOR_CREDITO_7PERC < vVALOR_ESTORNO_CRED_TOTAL THEN vVALOR_CREDITO_7PERC ELSE vVALOR_ESTORNO_CRED_TOTAL END IF;
		
		-- CALCULO DO CREDITO 7% + RATEIO - BASE REDUZIDA
		vVALOR_CREDITO_RED_ESCOLHIDO := IF vVALOR_CREDITO_7PERC_RED < vVALOR_ESTORNO_CRED_RED THEN vVALOR_CREDITO_7PERC_RED ELSE vVALOR_ESTORNO_CRED_RED END IF;
		
		-- CALCULO DO CREDITO DESTINADO A COMERCIO OU INDUSTRIA
		vVALOR_CRED_DESTINADO_COMERCIO := vALIQ_CREDITO_PRESUMIDO * vVALOR_SAID_COMPETE;
		
		-- CALCULO DO CREDITO DESTINADO A COMERCIO OU INDUSTRIA
		vVALOR_CRED_PRESUMIDO := vVALOR_ICMS_SAID_COMPETE - vVALOR_CREDITO_ESCOLHIDO - vVALOR_CRED_DESTINADO_COMERCIO
			
		-- CALCULO DO ADICIONAL DE 3.5% DO INCENTIVO
		vVALOR_ADICIONAL_INCENTIVO := vALIQ_CREDITO_ADICIONAL * vVALOR_CRED_DESTINADO_COMERCIO
			
		-- APURACAO COMPETE
		vVALOR_APURADO_COMPETE := ((r.VLCREDITO + vVALOR_CREDITO_RED_ESCOLHIDO + vVALOR_CREDITO_7PERC +  vVALOR_CRED_PRESUMIDO + vVALOR_CRED_DESTINADO_COMERCIO) - (r.VLDEBITO + vVALOR_ESTORNO_CRED_RED + vVALOR_ESTORNO_CRED_COMPETE))
			
			-- CALCULA O RESULTADO ATUAL
      vVALOR_SALDO_ATUAL := CASE WHEN r.DATA >= vDT_INICIO_BENEFICIO_ES THEN vVALOR_APURADO_COMPETE ELSE (r.VLCREDITO - r.VLDEBITO) END);
      vVALOR_APURADO     := vVALOR_SALDO_ANTERIOR + vVALOR_SALDO_ATUAL;
    
      -- ATUALIZA OS VALORES A PAGAR E A RECUPERAR
      vVALOR_PAGAR := CASE
                        WHEN vVALOR_APURADO < 0 THEN
                         ABS(vVALOR_APURADO)
                        ELSE
                         0
                      END;
      vVALOR_RECUPERAR := CASE
                            WHEN vVALOR_APURADO > 0 THEN
                             vVALOR_APURADO
                            ELSE
                             0
                          END;
    
      -- ATUALIZA O VALOR_RECUPERAR_ANTERIOR PARA PROXIMA ITERACAO
      vVALOR_SALDO_ANTERIOR := CASE
                                 WHEN vVALOR_APURADO > 0 THEN
                                  vVALOR_APURADO
                                 ELSE
                                  0
                               END;
    
		 -- FAZ O UPSERT
      UPDATE BI_SINC_APURACAO_ICMS
         SET VLCREDITO   = r.VLCREDITO,
             VLDEBITO    = r.VLDEBITO,
             VLSALDO     = r.VLSALDO,
             VLPAGAR     = vVALOR_PAGAR,
             VLRECUPERAR = vVALOR_RECUPERAR,
             DT_UPDATE   = SYSDATE
       WHERE DATA = r.DATA
         AND CODFILIAL = r.CODFILIAL;
    
      IF SQL%NOTFOUND THEN
        INSERT INTO BI_SINC_APURACAO_ICMS
          (CODFILIAL,
           DATA,
           VLCREDITO,
           VLDEBITO,
           VLSALDO,
           VLPAGAR,
           VLRECUPERAR,
           DT_UPDATE)
        VALUES
          (r.CODFILIAL,
           r.DATA,
           r.VLCREDITO,
           r.VLDEBITO,
           r.VLSALDO,
           vVALOR_PAGAR,
           vVALOR_RECUPERAR,
           SYSDATE);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro encontrado: ' || SQLERRM);
        RAISE_APPLICATION_ERROR(-20000, 'Erro durante a insercao na tabela: ' || SQLERRM);
    END;
  END LOOP;

  COMMIT;

END;
